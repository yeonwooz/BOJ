import sys

def solve(n):
    dp = [0, 1, 2, 4]
    for i in range(4, n + 1):
        dp.append(dp[i-3] + dp[i-2] + dp[i-1])
    print(dp[n])

if __name__ ==  "__main__":
    T = int(sys.stdin.readline())
    for _ in range(T):
        n = int(sys.stdin.readline())
        solve(n)

# 설명 추가
# dp[n] : n이라는 수를 만드는 경우의 수

# 숫자 1,2,3을 이용할 수 있는 상황에서
# 4를 만들기 위해서는

# - 1을 먼저 만드는 케이스 : 연산 도중 1이 되도록 조합하는 경우의 수 가운데, 연산 도중 2가 되는 경우는 피해서 만드는 경우 
# => (1+3)

# - 2를 먼저 만드는 케이스 : 연산 도중 2가 되도록 조합하는 경우의 수 가운데, 연산 도중  3이 되는 경우는 피해서 만드는 경우 
# => (1+1+2) (2+2)

# - 3을 먼저 만드는 케이스 : 연산 도중 3이 되도록 조합하는 경우의 수 
# => (1+2+1) (1+1+1+1) (2+1+1) (3+1)

# dp[n]은 네개 앞에 있는 항 dp[n-3]과는 독립적인데, 
# 세개 앞에 있는 항(dp[n-1])부터는 그 항에 1이나 2나 3을 더함으로써 도달할 수 있는 항이기 때문에 동적인 관계가 생긴다.

# 세개 앞에 있는 항에서부터 연산도중 +1을 거쳐가도록 합하는 케이스, +2를 거쳐가도록 합하는 케이스, +3을 거쳐가도록 합하는 케이스

